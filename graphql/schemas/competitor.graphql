enum RegistrationStatusEnum {
    PENDING
    WAITING_LIST
    DECLINED
    APPROVED
}

enum PaymentStatusEnum {
    MISSING_PAYMENT
    PARTIAL_PAYMENT
    FULL_PAYMENT
    NEEDS_PARTIAL_REFUND
    REFUNDED
}

input RegisterCompetitorInput {
    first_name: String!
    last_name: String!
    email: Email!
    guests: [String!]!
    is_interested_in_nations_cup: Boolean!
    events: [ID!]
    days: [ID!]
}

input CreateCompetitorInput {
    first_name: String!
    last_name: String!
    email: Email!
    wca_id: WcaId!
    nationality: String!
    registration_status: RegistrationStatusEnum
    payment_status: PaymentStatusEnum
    event_ids: [ID!]
    day_ids: [ID!]
}

type RegistrationReceipt {
    id: ID!
    first_name: String!
    last_name: String!
    wca_id: WcaId!
    email: Email!
}

type Competitor {
    id: ID!
    first_name: String!
    last_name: String!
    wca_id: WcaId!
    email: Email! @guard
    registration_status: RegistrationStatusEnum!
    payment_status: PaymentStatusEnum! @guard
    has_podium_potential: Boolean!
    events: [Event!]! @belongsToMany
    days: [Day!]! @belongsToMany @guard
    nationality: String!
    is_eligble_for_prizes: Boolean!
    finances: FinancialBook! @guard
    created_at: DateTime!
    updated_at: DateTime
}

extend type Query {
    competitors(events: [ID!], days: [ID!], is_eligble_for_prizes: Boolean @eq): [Competitor!]! @paginate
    competitor(id: ID!): Competitor @find
}

extend type Mutation {
    registerCompetitor(input: RegisterCompetitorInput @spread): RegistrationReceipt @guard
    createCompetitor(input: CreateCompetitorInput @spread): Competitor @create
    updateCompetitor(input: CreateCompetitorInput @spread): Competitor @update
    deleteCompetitor(id: ID!): Competitor @delete
}

