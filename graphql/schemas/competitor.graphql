input RegisterCompetitorInput {
    first_name: String!
    last_name: String!
    email: Email!
    guests: [String!]!
    is_interested_in_nations_cup: Boolean!
    events: [ID!]
    days: [ID!]
}

input CreateCompetitorInput {
    first_name: String!
    last_name: String!
    email: Email!
    wca_id: WcaId!
    nationality: String!
    gender: String!
    registration_status: RegistrationStatus
    payment_status: PaymentStatus
    guests: [String!]!
    is_interested_in_nations_cup: Boolean!
    days: DaysBelongsToMany
    events: EventsBelongsToMany
}

input UpdateCompetitorInput {
    id: ID!
    first_name: String
    last_name: String
    email: Email
    nationality: String
    gender: String
    guests: [String!]
    is_interested_in_nations_cup: Boolean
    "Whether or not the non-staffing competitor should be exempt from payment. Staffs will get the payment exemption automatically"
    is_exempt_from_payment: Boolean
    days: DaysBelongsToMany
    events: EventsBelongsToMany
}

input UpdateRegistrationInput {
    id: ID!
    first_name: String
    last_name: String
    email: Email
    nationality: String
    gender: String
    guests: [String!]
    is_interested_in_nations_cup: Boolean
    days: DaysBelongsToMany
    events: EventsBelongsToMany
}

type RegistrationReceipt {
    registration_id: ID!
    first_name: String!
    last_name: String!
    wca_id: WcaId!
    email: Email!
}

type Competitor {
    id: ID!
    first_name: String!
    last_name: String!
    wca_id: WcaId!
    email: Email! @guard @managementAccess
    avatar: String
    gender: String! @guard @managementAccess
    guests: [String!] @guard @managementAccess
    number_of_guests: Int! @rename(attribute: "numberOfGuests")
    registration_status: RegistrationStatus!
    payment_status: PaymentStatus! @guard @managementAccess
    has_podium_potential: Boolean!
    events: [Event!]! @belongsToMany
    days: [Day!]! @belongsToMany @guard @managementAccess
    nationality: String!
    is_exempt_from_payment: Boolean! @guard @managementAccess
    is_eligible_for_prizes: Boolean!
    is_interested_in_nations_cup: Boolean!
    queue_number_in_waiting_list: Int! @guard @managementAccess
    finances: FinancialBook! @guard @managementAccess
    created_at: DateTime!
    updated_at: DateTime
}

extend type Query {
    competitors(
        events: [ID!]
        days: [ID!]
        is_eligible_for_prizes: Boolean @eq
        is_interested_in_nations_cup: Boolean @eq
        registration_status: RegistrationStatus @eq
        payment_status: PaymentStatus @eq
        wca_id: WcaId @eq
        competition_id: ID @eq
    ): [Competitor!]!
        @guard
        @can(ability: "crud")
        @paginate

    publicCompetitors(
        events: [ID!]
        days: [ID!]
        wca_id: WcaId @eq
        competition_id: ID @eq
    ): [Competitor!]!
        @eq(key: "registration_status", value: "ACCEPTED")
        @paginate


    competitor(id: ID! @eq): Competitor @find
}

extend type Mutation {
    registerCompetitor(input: RegisterCompetitorInput @spread): RegistrationReceipt
        @guard
    updateRegistration(input: UpdateRegistrationInput @spread): Competitor
        @update
        @guard
        @can(ability: "manage", find: "id")
        @job(dispatch: "\\App\\Jobs\\CreateCompetitorBook")
    approveRegistration(
        id: ID!
    ): Competitor
        @guard
        @can(ability: "crud")
    createCompetitor(input: CreateCompetitorInput @spread): Competitor
        @create
        @guard
        @can(ability: "crud")
    updateCompetitor(input: UpdateCompetitorInput @spread): Competitor
        @update
        @guard
        @can(ability: "crud")
    deleteCompetitor(id: ID!): Competitor
        @delete
        @guard
        @can(ability: "crud")
    createPaymentIntent(competition_id: ID!): Payment
        @guard
}

