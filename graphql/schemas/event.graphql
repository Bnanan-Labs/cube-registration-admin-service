interface EventInterface {
    id: ID!
    wca_event_id: String
    title: String
    full_name: String
    short_name: String
    result_format: String
    qualification_limit: TimeMs
    cutoff_limit: TimeMs
    time_limit: TimeMs
    competitor_limit: Int
    fee: MoneyBag
    competitors: [Competitor!]! @belongsToMany
    staff: [Staff!]! @belongsToMany
}

type Event implements EventInterface{
    id: ID!
    wca_event_id: String
    title: String
    full_name: String
    short_name: String
    result_format: String
    qualification_limit: TimeMs
    cutoff_limit: TimeMs
    time_limit: TimeMs
    competitor_limit: Int
    fee: MoneyBag
    competitors: [Competitor!]! @belongsToMany
    staff: [Staff!]! @belongsToMany
}

type EventWithCompetitorPivot implements EventInterface {
    id: ID!
    wca_event_id: String
    title: String
    full_name: String
    short_name: String
    result_format: String
    qualification_limit: TimeMs
    cutoff_limit: TimeMs
    time_limit: TimeMs
    competitor_limit: Int
    fee: MoneyBag
    pivot: CompetitorEventPivot
    competitors: [Competitor!]! @belongsToMany
    staff: [Staff!]! @belongsToMany
}

type CompetitorEventPivot {
    best_single: Int
    competition_rank_single: Int
    national_rank_single: Int
    continental_rank_single: Int
    world_rank_single: Int
    best_average: Int
    competition_rank_average: Int
    national_rank_average: Int
    continental_rank_average: Int
    world_rank_average: Int
    synced_at: DateTime
}

input EventsBelongsToMany {
    sync: [ID!]
    syncWithoutDetaching: [ID!]
}

input CreateEventMutation {
    id: ID!
    title: String!
    qualification_limit: TimeMs
    cutoff_limit: TimeMs
    time_limit: TimeMs
    competitor_limit: TimeMs
    fee: MoneyBagInput
}

input UpdateEventMutation {
    id: ID!
    title: String
    qualification_limit: TimeMs
    cutoff_limit: TimeMs
    time_limit: TimeMs
    competitor_limit: TimeMs
    fee: MoneyBagInput
}

extend type Query {
    events: [Event!]! @paginate
    event(id: ID! @eq): Event @find
}

extend type Mutation {
    createEvent(input: CreateEventMutation! @spread): Event! @create
    updateEvent(input: UpdateEventMutation! @spread): Event! @update
    deleteEvent(id: ID!): Event! @delete
}


