type Staff {
    id: ID!
    first_name: String!
    last_name: String!
    wca_id: WcaId!
    application: String!
    registration_status: RegistrationStatus
    scrambling_qualifications: [Event!]! @hasMany
    availability: [Day!]! @hasMany
    events: [Event!]! @hasMany
    priority_events: [Event!]! @hasMany
    staff_roles: [StaffRole!]! @hasMany
    approvals: [Staff!]! @hasMany
    team: Team @belongsTo
    teams_led: Team @hasMany
    t_shirt_size: ShirtSize
}

input StaffBelongsToMany {
    sync: [ID!]
    syncWithoutDetaching: [ID!]
}

input StaffBelongsTo {
    connect: ID
}

input StaffHasMany {
    connect: [ID!]
    disconnect: [ID!]
}

input RegisterStaffInput {
    id: ID!
    first_name: String!
    last_name: String!
    application: String!
    scrambling_qualifications: EventsBelongsToMany
    availability: DaysBelongsToMany
    events: EventsBelongsToMany
    priority_events: EventsBelongsToMany
    staff_roles: StaffRolesBelongsToMany
    t_shirt_size: ShirtSize
}

input ApproveStaffInput {
    id: ID!
}

input CreateStaffInput {
    first_name: String!
    last_name: String!
    application: String!
    wca_id: WcaId
    scrambling_qualifications: EventsBelongsToMany
    availability: DaysBelongsToMany
    events: EventsBelongsToMany
    priority_events: EventsBelongsToMany
    staff_roles: StaffRolesBelongsToMany
    t_shirt_size: ShirtSize
}

input UpdateStaffInput {
    id: ID!
    first_name: String!
    last_name: String!
    application: String!
    scrambling_qualifications: EventsBelongsToMany
    availability: DaysBelongsToMany
    events: EventsBelongsToMany
    priority_events: EventsBelongsToMany
    staff_roles: StaffRolesBelongsToMany
    t_shirt_size: ShirtSize
}

extend type Query {
    staff(id: ID!): Staff
        @find
        @guard
        @can(ability: "manage", find: "id")
    staffs(
        team_id: ID @eq
        registration_status: RegistrationStatus @eq
        t_shirt_size: ShirtSize @eq
    ): [Staff!]!
        @paginate
        @guard
        @can(ability: "manage", find: "id")
}

extend type Mutation {
    registerStaff(input: RegisterStaffInput! @spread): Staff!
        @guard
    approveStaff(input: ApproveStaffInput! @spread): Staff!
        @guard
        @can(ability: "manage", find: "id")
    createStaff(input: CreateStaffInput @spread): Staff!
        @create
        @guard
        @can(ability: "manage")
    updateStaff(input: UpdateStaffInput @spread): Staff!
        @update
        @guard
        @can(ability: "manage")
}
