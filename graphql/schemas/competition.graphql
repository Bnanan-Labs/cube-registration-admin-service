input UpdateCompetitionInput {
    id: ID!
    title: String @rules(apply: ["max:255", "unique:competitions,title"])
    start_date: Date
    end_date: Date
    registration_starts: DateTime
    registration_ends: DateTime
    volunteer_registration_starts: DateTime
    volunteer_registration_ends: DateTime
    base_fee: MoneyBagInput
    guest_fee: MoneyBagInput
    currency: CurrencyEnum
    competitor_limit: Int @rules(apply: ["min:0"])
    spectator_limit: Int @rules(apply: ["min:0"])
}

type Competition {
    id: ID!
    title: String!
    start_date: Date!
    end_date: Date!
    is_active: Boolean!
    registration_starts: DateTime
    registration_ends: DateTime
    volunteer_registration_starts: DateTime
    volunteer_registration_ends: DateTime
    base_fee: MoneyBag
    guest_fee: MoneyBag
    currency: String!
    finances: FinancialBook! @guard @can(ability: "manage", model: "Competition", query: true)
    competitor_limit: Int
    spectator_limit: Int
    is_competitor_full: Boolean
    is_spectator_full: Boolean
    competitors: [Competitor!]! @hasMany
    spectators: [Spectator!]! @hasMany
    staff: [Staff!]! @hasMany
    events: [Event!]! @hasMany
    days: [Day!]! @hasMany
}

extend type Query {
    competitions: [Competition!]! @paginate
    competition(id: ID! @eq): Competition @find
}

extend type Mutation {
    updateCompetition(
        input: UpdateCompetitionInput @spread
    ): Competition
        @guard
        @can(ability: "manage", find: "id")
        @update
}

