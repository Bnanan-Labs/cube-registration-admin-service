type Spectator {
    id: ID!
    first_name: String!
    last_name: String!
    email: Email! @guard @can(ability: "manage" model: "Spectator")
    registration_status: RegistrationStatus!
    finances: FinancialBook @guard @can(ability: "manage", model: "Spectator")
    payment_status: PaymentStatus! @guard @can(ability: "manage", model: "Spectator")
    days: [Day!]! @belongsToMany
}

input RegisterSpectatorInput {
    first_name: String!
    last_name: String!
    email: Email!
    days: DaysBelongsToMany!
}

input CreateSpectatorInput {
    first_name: String!
    last_name: String!
    email: Email!
    days: DaysBelongsToMany
}

input UpdateSpectatorInput {
    id: ID!
    first_name: String
    last_name: String
    email: Email
    days: DaysBelongsToMany!
}

extend type Query {
    spectator(id: ID!): Spectator @find
    spectators(
        registration_status: RegistrationStatus @eq
        payment_status: PaymentStatus @eq
    ): [Spectator!]! @paginate
}

extend type Mutation {
    createSpectator(input: CreateSpectatorInput @spread): Spectator! @create @guard @can(ability: "manage")
    updateSpectator(input: UpdateSpectatorInput @spread): Spectator! @update @guard @can(ability: "manage")
    deleteSpectator(id: ID!): Spectator! @delete @guard @can(ability: "manage", find: "id")
    registerSpectator(input: RegisterSpectatorInput): Spectator!
}
